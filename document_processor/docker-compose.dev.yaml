services:
  nginx:
    image: nginx:latest
    container_name: nginx_container
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./static:/app/static
      - ./media:/app/media
    depends_on:
      - web
    networks:
      - pg-network

  web:
    build:
      context: .
      dockerfile: ./Dockerfile.dev
    container_name: django_container
    restart: unless-stopped
    entrypoint: ["/app/entrypoint.dev.sh"]
    volumes:
      - ./:/app
      - ./static:/app/static
      - ./media:/app/media
    ports:
      - "8000:8000"
    env_file:
      - ./env/dev/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    links:
      - db:db
    networks:
      - pg-network

  celery:
    build:
      context: .
      dockerfile: ./Dockerfile.dev
    container_name: celery_container
    restart: unless-stopped
    command: celery -A document_processor worker --loglevel=info
    volumes:
      - ./:/app
    env_file:
      - ./env/dev/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - pg-network

  celery_beat:
    build:
      context: .
      dockerfile: ./Dockerfile.dev
    container_name: celery_beat_container
    restart: unless-stopped
    command: bash -c "celery -A document_processor beat -l info"
    env_file:
      - ./env/dev/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - pg-network

  db:
    image: postgres:latest
    container_name: postgres_container
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./env/dev/.env
    ports:
      - "5432:5432"
    networks:
      - pg-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_container
    restart: unless-stopped
    env_file:
      - ./env/dev/.env
    ports:
      - "5050:80"
    networks:
      - pg-network
    depends_on:
      - db

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq_container
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    expose:
      - "5672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - pg-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis_container
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    env_file:
      - ./env/dev/.env
    networks:
      - pg-network

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight_container
    restart: unless-stopped
    ports:
      - "5540:5540"
    volumes:
      - redisinsight_data:/db
    env_file:
      - ./env/dev/.env
    networks:
      - pg-network
    depends_on:
      - redis

  flower:
    build:
      context: .
      dockerfile: ./Dockerfile.dev
    container_name: flower_container
    restart: unless-stopped
    command: celery -A document_processor flower --port=5555
    ports:
      - 5555:5555
    env_file:
      - ./env/dev/.env
    networks:
      - pg-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      celery:
        condition: service_started

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
  redisinsight_data:

networks:
  pg-network:
    driver: bridge 